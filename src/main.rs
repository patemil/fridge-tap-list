#![no_std]
#![no_main]

// Manually copied from https://github.com/unneback/LCD/blob/10709f03c5c57bdf737b54c35fc8c82c67a4ae96/GreenPAK/LCDx4.hex
const GREENPAK_DATA: [u8; 256] = [
    0xE1, 0x0D, 0x00, 0xA1, 0x0D, 0x00, 0xEF, 0xE3, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x50, 0x03, 0x1D, 0x10, 0x4A, 0x3E, 0xE8, 0x77, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x0F, 0x00, 0x3E, 0xE0, 0x03,
    0x3E, 0x00, 0xC4, 0xE9, 0x2F, 0x03, 0xF0, 0x0F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xE9,
    0x0F, 0x00, 0xE9, 0x0F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x80, 0x04, 0x00, 0x84, 0x30, 0x00, 0x30, 0x00, 0x00, 0x30, 0x30, 0x30, 0x00, 0x03, 0x03,
    0x04, 0x03, 0x04, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x04, 0x00, 0x08, 0x00, 0x34, 0x22, 0x31, 0x0C, 0xE8, 0x00, 0xE8, 0x00, 0x1B, 0x14, 0x00,
    0x8A, 0x00, 0x00, 0x00, 0xF4, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x81, 0x00, 0x00, 0x0B, 0x00, 0x64, 0x00, 0x46, 0x40, 0x20, 0x0D, 0x25, 0x00, 0x20, 0x2D, 0x07,
    0x00, 0x00, 0x02, 0x01, 0x00, 0x00, 0x02, 0x00, 0x01, 0x00, 0x00, 0x02, 0x01, 0x00, 0x00, 0x02,
    0x00, 0x01, 0x00, 0x00, 0x02, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xA5
];

const GREENPAK_DATA_NVM: [[u8; 16]; 16] = [
    [0xE1, 0x0D, 0x00, 0xA1, 0x0D, 0x00, 0xEF, 0xE3, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],
    [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x50, 0x03, 0x1D, 0x10, 0x4A, 0x3E, 0xE8, 0x77, 0x00, 0x00],
    [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x0F, 0x00, 0x3E, 0xE0, 0x03],
    [0x3E, 0x00, 0xC4, 0xE9, 0x2F, 0x03, 0xF0, 0x0F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xE9],
    [0x0F, 0x00, 0xE9, 0x0F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],
    [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],
    [0x00, 0x80, 0x04, 0x00, 0x84, 0x30, 0x00, 0x30, 0x00, 0x00, 0x30, 0x30, 0x30, 0x00, 0x03, 0x03],
    [0x04, 0x03, 0x04, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],
    [0x00, 0x04, 0x00, 0x08, 0x00, 0x34, 0x22, 0x31, 0x0C, 0xE8, 0x00, 0xE8, 0x00, 0x1B, 0x14, 0x00],
    [0x8A, 0x00, 0x00, 0x00, 0xF4, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00],
    [0x81, 0x00, 0x00, 0x0B, 0x00, 0x64, 0x00, 0x46, 0x40, 0x20, 0x0D, 0x25, 0x00, 0x20, 0x2D, 0x07],
    [0x00, 0x00, 0x02, 0x01, 0x00, 0x00, 0x02, 0x00, 0x01, 0x00, 0x00, 0x02, 0x01, 0x00, 0x00, 0x02],
    [0x00, 0x01, 0x00, 0x00, 0x02, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00],
    [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],
    [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],
    [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xA5]
];

/*
[
    0xD0, 0x0A, 0xA5, 0x58, 0x5D, 0xD3, 0x0A, 0x43, 0x37, 0x08, 0x3D, 0x49, 0x75, 0x5A, 0xD3, 0x69,
    0x4D, 0xA7, 0x35, 0x9D, 0x2C, 0x34, 0x20, 0x1C, 0x74, 0x0D, 0xA4, 0x54, 0x81, 0x02, 0xE7, 0xFA,
    0x18, 0x2A, 0xB0, 0xD6, 0xF4, 0x5A, 0xD3, 0x6B, 0x4D, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x80, 0x03, 0x00, 0x00, 0x0A, 0xA8, 0xB7, 0x0D, 0xB8, 0xC0, 0x05, 0xB4, 0x80,
    0x05, 0xB0, 0x40, 0x05, 0x44, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x30, 0x58, 0x00, 0x20, 0x20, 0x58, 0x58, 0x00, 0x00, 0x80, 0x80, 0x58, 0x00, 0x58, 0x58,
    0x58, 0x58, 0x58, 0x58, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x14, 0x22, 0x30, 0x0C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x28, 0x88, 0x00, 0x00, 0xAC, 0xAC, 0xAC, 0x02, 0x20, 0x08, 0x00, 0x00, 0xAC, 0x00, 0x00, 0x00,
    0x00, 0x00, 0xAC, 0x20, 0x00, 0x01, 0x00, 0x14, 0x01, 0x10, 0x08, 0x60, 0x01, 0x10, 0x00, 0x08,
    0x14, 0x01, 0x10, 0x08, 0x60, 0x01, 0x10, 0x00, 0x08, 0x00, 0x02, 0x02, 0x01, 0x00, 0x20, 0x02,
    0x00, 0x01, 0x00, 0x08, 0x02, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xA5,
];
 */

mod greenpak;
mod lm75;

// use core::fmt::Write;

//use esp_println::println;
use fugit::RateExtU32;

use esp32c3_hal::{
    clock::ClockControl, i2c::I2C, peripherals::Peripherals, prelude::*, timer::TimerGroup, Delay, Rtc, gpio::IO,
};

use esp_backtrace as _;
use esp_println::println;

use greenpak::GreenPAK;
use lm75::LM75;
use shared_bus::BusManagerSimple;

macro_rules! log_error {
    ($value:expr, $message:expr) => {
        match $value {
            Ok(_) => {},
            Err(err) => {
                esp_println::println!(concat!($message, ": {:?}"), err)
            }
        }
    };
    ($value:expr, $message:expr$(, $args:expr)*) => {
        match $value {
            Ok(_) => {},
            Err(err) => {
                esp_println::println!(concat!($message, ": {:?}"), $($args),*, err)
            }
        }
    };
}

#[riscv_rt::entry]
fn main() -> ! {
    println!("Hello world");
    let peripherals = Peripherals::take();
    let mut system = peripherals.SYSTEM.split();
    let clocks = ClockControl::boot_defaults(system.clock_control).freeze();

    // Disable the RTC and TIMG watchdog timers
    let mut rtc = Rtc::new(peripherals.RTC_CNTL);
    let timer_group0 = TimerGroup::new(peripherals.TIMG0, &clocks);
    let mut wdt0 = timer_group0.wdt;
    let timer_group1 = TimerGroup::new(peripherals.TIMG1, &clocks);
    let mut wdt1 = timer_group1.wdt;

    rtc.swd.disable();
    rtc.rwdt.disable();
    wdt0.disable();
    wdt1.disable();

    let io = IO::new(peripherals.GPIO, peripherals.IO_MUX);

    let i2c = I2C::new(
        peripherals.I2C0,
        io.pins.gpio0,
        io.pins.gpio1,
        100u32.kHz(),
        &mut system.peripheral_clock_control,
        &clocks,
    );

    let i2c = BusManagerSimple::new(i2c);
    let mut delay = Delay::new(&clocks);

    let mut greenpak = GreenPAK::new(i2c.acquire_i2c());

    for i in 0..16 {
        log_error!(greenpak.erase_nvm_page(i as u8), "Failed to erase NVM page {}", i);
        delay.delay_ms(20u32);
    }
    log_error!(greenpak.write_program_nvm(&GREENPAK_DATA), "Failed to write program to GreenPAK");
    // Enable slave select generation
    log_error!(greenpak.virtual_input(0b1000_0000, 0b0111_1111), "Failed to set virtual input");

    let mut sensor = LM75::new(i2c.acquire_i2c());
   
    loop {
        let temp = sensor.measure().unwrap();

        delay.delay_ms(1000u32);
    }
}
